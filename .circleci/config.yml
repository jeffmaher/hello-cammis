version: 2.0
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:8.2.1
      environment:
        NODE_ENV: test

jobs:
  cc-install:
    <<: *defaults
    steps:
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter
  test:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Install node modules
          command: npm install
      - run:
          name: Update container repositories
          command: sudo apt-get update
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run frontend testss
          command: |
            npm test
            ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.frontend.json coverage/frontend/lcov.info
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.frontend.json
      - run:
          name: If pull-request, trigger a review build
          command: |
            if [ $CIRCLE_PULL_REQUEST ] ; then
              echo Calling build job for PR: $CIRCLE_PULL_REQUEST
              echo Git SHA1 to build: $CIRCLE_SHA1
              GIT_PR_NUM=${CIRCLE_PULL_REQUEST##*/}
              REVIEW_ENV_NAME="review_${CIRCLE_PROJECT_REPONAME}_pr${GIT_PR_NUM}"
              # Trigger "build" job in this CircleCI config with review env name
              CCI_API_URL="https://circleci.com/api/v1.1/project/github/ca-mmis"
              # Generate JSON doc with build parameters
              CCI_PARAMS="{\"build_parameters\":{\"CIRCLE_JOB\":\"build\", \
                \"REVIEW_ENV_NAME\":\"${REVIEW_ENV_NAME}\"}}"
              curl -u ${CIRCLE_API_KEY}: -X POST \
                --header "Content-Type: application/json" \
                -d "${CCI_PARAMS}" \
                ${CCI_API_URL}/${CIRCLE_PROJECT_REPONAME}/tree/${CIRCLE_BRANCH}
            fi
      - persist_to_workspace:
          root: ~/repo/tmp
          paths: .
  upload-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 1 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json
  # This will build a Docker image and push it to an ECR
  # Triggered by tagging the repo in GitHub, or via CircleCI API for PRs
  build:
    working_directory: /app
    docker:
      - image: cadhcscammis/infrastructure-private:5.1.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push application Docker image
          command: |
            echo "Git SHA1: ${CIRCLE_SHA1}"
            echo "Git Branch: ${CIRCLE_BRANCH}"
            echo "Git Tag: ${CIRCLE_TAG}"
            echo "Review Env: ${REVIEW_ENV_NAME}"
            if [ "${REVIEW_ENV_NAME}" ]; then
              IMAGE_TAG="${REVIEW_ENV_NAME}"
            elif [ "${CIRCLE_TAG}" ]; then
              IMAGE_TAG="version-${CIRCLE_TAG}"
            else
              echo "No Docker image tag!"
            fi
            if [ "${IMAGE_TAG}" ]; then
              docker build -t ${AWS_ECR_REPO_NAME}:${IMAGE_TAG} \
                -t ${AWS_ECR_REPO_NAME}:commit-${CIRCLE_SHA1} .
              login="$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email )"
              ${login}
              docker push ${AWS_ECR_REPO_NAME}:${IMAGE_TAG}
              docker push ${AWS_ECR_REPO_NAME}:commit-${CIRCLE_SHA1}
            fi
      - run:
          name: If review build, trigger a review-environment deploy
          command: |
            if [ "${REVIEW_ENV_NAME}" ]; then
              env
              echo ----
              echo Calling Terraform job for PR: $CIRCLE_PULL_REQUEST
              echo "Git SHA1: ${CIRCLE_SHA1}"
              echo "Git Branch: ${CIRCLE_BRANCH}"
              echo "Review Env: ${REVIEW_ENV_NAME}"
              echo Calling back to CircleCI terraform_apply job
              CCI_API_URL="https://circleci.com/api/v1.1/project/github/ca-mmis"
              # Generate JSON doc with build parameters
              CCI_PARAMS="{\"build_parameters\":{\"CIRCLE_JOB\":\"terraform_apply\", \
                \"GIT_SHA1\":\"${CIRCLE_SHA1}\", \
                \"GIT_REPONAME\":\"${CIRCLE_PROJECT_REPONAME}\", \
                \"REVIEW_ENV_NAME\":\"${REVIEW_ENV_NAME}\"}}"
              curl -u ${CIRCLE_API_KEY}: -X POST \
                --header "Content-Type: application/json" \
                -d "${CCI_PARAMS}" \
                ${CCI_API_URL}/CI-review-dev/tree/PAT-168
            fi

# This will run the "test" job on any git-push, but the "build" job only on a tag push
# The "test" job will also spawn a build job if there's a Pull-Request defined
# For a tag push, the branch info is empty.
# The "tags" filter in the "test" job is necessary for the "build" job to run.
workflows:
  version: 2
  test-build:
    jobs:
      - cc-install
      - test:
          filters:
            tags:
              only: /.*/
          requires:
            - cc-install
      - upload-coverage:
          requires:
            - test
            - cc-install
      - build:
          requires:
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
