version: 2.0
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:8.2.1
      environment:
        NODE_ENV: test

jobs:
  cc-install:
    <<: *defaults
    steps:
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter
  test:
    <<: *defaults
    working_directory: /app
    docker:
      - image: cadhcscammis/cammis-code-analyze:latest
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Install node modules
          command: npm install
      - run:
          name: Update container repositories
          command: apk update
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run frontend testss
          command: |
            npm test
            ~/repo/tmp/cc-test-reporter format-coverage -t lcov -o ~/repo/tmp/codeclimate.frontend.json /app/coverage/frontend/lcov.info
      - persist_to_workspace:
          root: ~/repo/tmp
          paths:
            - codeclimate.frontend.json
      - run:
          name: If pull-request, trigger a Sonarcloud scan and report results
          command: |
            if [ $CIRCLE_PULL_REQUEST ] ; then
              GIT_PR_NUM=${CIRCLE_PULL_REQUEST##*/}
              echo "Git Branch: ${CIRCLE_BRANCH}"
              echo "Project Repo Name: ${CIRCLE_PROJECT_REPONAME}"
              echo "Git PR Number: ${GIT_PR_NUM}"
              /usr/bin/sonar-scanner   \
                -Dsonar.projectKey=ca-mmis_hello-cammis \
                -Dsonar.organization=ca-mmis \
                -Dsonar.sources=. \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.login=f483c00aad342c431e1436cf5b417bb8ea4f0bff \
                -Dsonar.pullrequest.base=master \
                -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} \
                -Dsonar.pullrequest.key=${GIT_PR_NUM} \
                -Dsonar.pullrequest.provider=GitHub \
                -Dsonar.pullrequest.github.repository=${CIRCLE_PROJECT_REPONAME}
            fi
      - persist_to_workspace:
          root: ~/repo/tmp
          paths: .
  upload-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ~/repo/tmp/cc-test-reporter sum-coverage ~/repo/tmp/codeclimate.*.json -p 1 -o ~/repo/tmp/codeclimate.total.json
            ~/repo/tmp/cc-test-reporter upload-coverage -i ~/repo/tmp/codeclimate.total.json
  # This will build a Docker image and push it to an ECR
  # Triggered by tagging the repo or by pushing to a specially-named branch in GitHub
  # The tag must be in ##.##.## format - see workflow below
  build:
    working_directory: /app
    docker:
      - image: cadhcscammis/infrastructure-private:5.1.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push application Docker image
          command: |
            echo "Git SHA1: ${CIRCLE_SHA1}"
            echo "Git Branch: ${CIRCLE_BRANCH}"
            echo "Git Tag: ${CIRCLE_TAG}"
            if [ "${CIRCLE_BRANCH}" ] ; then
              IMAGE_TAG="review_${CIRCLE_PROJECT_REPONAME}_br_${CIRCLE_BRANCH}"
              echo "Review Environment image: ${IMAGE_TAG}"
            elif [ "${CIRCLE_TAG}" ]; then
              IMAGE_TAG="version-${CIRCLE_TAG}"
              echo "Tag-build image: ${IMAGE_TAG}"
            else
              echo "No Docker image tag!"
              false  # Fail here
            fi
            docker build -t ${AWS_ECR_REPO_NAME}:${IMAGE_TAG} \
              -t ${AWS_ECR_REPO_NAME}:commit-${CIRCLE_SHA1} .
            login="$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email )"
            ${login}
            docker push ${AWS_ECR_REPO_NAME}:${IMAGE_TAG}
            docker push ${AWS_ECR_REPO_NAME}:commit-${CIRCLE_SHA1}
      - run:
          name: If review build, trigger a review-environment deploy
          command: |
            # Local env vars are not shared between "run" stanzas
            if [ "${CIRCLE_BRANCH}" ] ; then
              REVIEW_ENV_NAME="review_${CIRCLE_PROJECT_REPONAME}_br_${CIRCLE_BRANCH}"
              echo "Calling back to CircleCI to build a Review Environment"
              echo "Git SHA1: ${CIRCLE_SHA1}"
              echo "Git Branch: ${CIRCLE_BRANCH}"
              echo "Review Env: ${REVIEW_ENV_NAME}"
              CCI_API_URL="https://circleci.com/api/v1.1/project/github/ca-mmis"
              # Generate JSON doc with build parameters
              CCI_PARAMS="{\"build_parameters\":{\"CIRCLE_JOB\":\"kube_deploy\", \
                \"GIT_SHA1\":\"${CIRCLE_SHA1}\", \
                \"GIT_REPONAME\":\"${CIRCLE_PROJECT_REPONAME}\", \
                \"REVIEW_ENV_NAME\":\"${REVIEW_ENV_NAME}\"}}"
              curl -u ${CIRCLE_API_KEY}: -X POST \
                --header "Content-Type: application/json" \
                -d "${CCI_PARAMS}" \
                ${CCI_API_URL}/CI-review-dev/tree/master
            fi

# This workflow will run the "test" job on any git-push.
# It will run the "build" job only on a tag or branch push.
# The filters control which tags/branches get built.
# For a tag push, the branch info is empty, and vice-versa.
# The "tags" filter in the "test" job is necessary for the "build" job to run.
workflows:
  version: 2
  test-build:
    jobs:
      - cc-install
      - test:
          filters:
            tags:
              only: /.*/
          requires:
            - cc-install
      - upload-coverage:
          requires:
            - test
            - cc-install
      - build:
          requires:
            - test
          filters:
            branches:
              only: /^r_.+$/
            tags:
              only: /^\d+\.\d+\.\d+$/
