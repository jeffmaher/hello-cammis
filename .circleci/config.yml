version: 2.0
#------------------------
# --- REUSABLE CHUNKS ---
# -----------------------

env_vars: &env_vars
  environment:
    APP_NAME: hello-cammis
    # To use, $(eval $TAG)
    # Future TODO: Update TAG to work with build step
    TAG: if [ "${CIRCLE_TAG}" ]; then echo "$CIRCLE_TAG"; else echo "$CIRCLE_BRANCH"; fi; 
    # * Configure these in the CircleCI Job *
    # AWS_ACCESS_KEY_ID: Access key for an AWS user account that can publish to ECR
    # AWS_DEFAULT_OUTPUT: Set to `table` for human readable display in logs
    # AWS_DEFAULT_REGION: Region to deploy review environments to
    # AWS_ECR_REPO_NAME: URL or Docker namespace for the Docker image
    # AWS_SECRET_ACCESS_KEY: Secret key for an AWS user account that can publish to ECR
    # CC_TEST_REPORTER_ID: CodeClimate API key
    # CIRCLE_API_KEY: Key for making HTTP requests to CircleCI's API
    # GITHUB_ACCESS_TOKEN: Access token for the user committing the Helm Chart
    # GIT_COMMITTER_NAME: Plain language name for user committing the Helm Chart
    # GIT_COMMITTER_EMAIL: Email address for the user committing the Helm Chart

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:8.2.1
      environment:
        NODE_ENV: test

infrastructure_runtime: &infrastructure_runtime
  docker:
    - image: cadhcscammis/infrastructure-private:5.2.0
  <<: *env_vars

#------------------------
# --- JOBS ---
#------------------------

jobs:
  cc-install:
    <<: *defaults
    steps:
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter
  test-codeclimate: # Future TODO: Use the Docker image from this repo to run tests. Also, break different tests into different jobs to enable concurrent runs.
    <<: *defaults
    working_directory: /app
    docker:
      - image: cadhcscammis/cammis-code-analyze:latest
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Install node modules
          command: npm install
      - run:
          name: Update container repositories
          command: apk update
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run frontend testss
          command: |
            npm test
            ~/repo/tmp/cc-test-reporter format-coverage -t lcov -o ~/repo/tmp/codeclimate.frontend.json /app/coverage/frontend/lcov.info
      - persist_to_workspace:
          root: ~/repo/tmp
          paths:
            - codeclimate.frontend.json
      - persist_to_workspace:
          root: ~/repo/tmp
          paths: .
  upload-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ~/repo/tmp/cc-test-reporter sum-coverage ~/repo/tmp/codeclimate.*.json -p 1 -o ~/repo/tmp/codeclimate.total.json
            ~/repo/tmp/cc-test-reporter upload-coverage -i ~/repo/tmp/codeclimate.total.json
  test-whitesource: 
    <<: *defaults
    working_directory: /app
    environment:
      JAVA_HOME: /usr/lib/jvm/java-8-oracle
      JAVA_TOOL_OPTIONS: -Xmx2018m -Xms64m
    docker:
      - image: cadhcscammis/cammis-code-analyze:latest
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Install node modules
          command: npm install
      - run:
          name: Update container repositories
          command: apk update
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: 
          name: Run security testss
          command: |
            /app/wss_agent.sh -c /app/wss-unified-agent-project.config -d /app      
  # This will build a Docker image and push it to an ECR
  # Triggered by tagging the repo or by pushing to a specially-named branch in GitHub
  # The tag must be in ##.##.## format - see workflow below
  build:
    working_directory: /app
    <<: *infrastructure_runtime
    steps:
      - checkout
      - setup_remote_docker
      - run: # Future TODO: We should separate the build and publish. Built Docker container should be used for test steps and that chunk could be used
          name: Build and push application Docker image
          command: |
            echo "Git SHA1: ${CIRCLE_SHA1}"
            echo "Git Branch: ${CIRCLE_BRANCH}"
            echo "Git Tag: ${CIRCLE_TAG}"
            if [ "${CIRCLE_BRANCH}" ] ; then
              IMAGE_TAG="review_${CIRCLE_PROJECT_REPONAME}_br_${CIRCLE_BRANCH}"
              echo "Review Environment image: ${IMAGE_TAG}"
            elif [ "${CIRCLE_TAG}" ]; then
              IMAGE_TAG="version-${CIRCLE_TAG}"
              echo "Tag-build image: ${IMAGE_TAG}"
            else
              echo "No Docker image tag!"
              false  # Fail here
            fi
            docker build -t ${AWS_ECR_REPO_NAME}:${IMAGE_TAG} \
              -t ${AWS_ECR_REPO_NAME}:commit-${CIRCLE_SHA1} .
            login="$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email )"
            ${login}
            docker push ${AWS_ECR_REPO_NAME}:${IMAGE_TAG}
            docker push ${AWS_ECR_REPO_NAME}:commit-${CIRCLE_SHA1}
      - run:
          name: If review build, trigger a review-environment deploy
          command: |
            # Local env vars are not shared between "run" stanzas
            if [ "${CIRCLE_BRANCH}" ] ; then
              REVIEW_ENV_NAME="review_${CIRCLE_PROJECT_REPONAME}_br_${CIRCLE_BRANCH}"
              echo "Calling back to CircleCI to build a Review Environment"
              echo "Git SHA1: ${CIRCLE_SHA1}"
              echo "Git Branch: ${CIRCLE_BRANCH}"
              echo "Review Env: ${REVIEW_ENV_NAME}"
              CCI_API_URL="https://circleci.com/api/v1.1/project/github/ca-mmis"
              # Generate JSON doc with build parameters
              CCI_PARAMS="{\"build_parameters\":{\"CIRCLE_JOB\":\"kube_deploy\", \
                \"GIT_SHA1\":\"${CIRCLE_SHA1}\", \
                \"GIT_REPONAME\":\"${CIRCLE_PROJECT_REPONAME}\", \
                \"REVIEW_ENV_NAME\":\"${REVIEW_ENV_NAME}\"}}"
              curl -u ${CIRCLE_API_KEY}: -X POST \
                --header "Content-Type: application/json" \
                -d "${CCI_PARAMS}" \
                ${CCI_API_URL}/CI-review-dev/tree/master
            fi
  publish_helm:
    <<: *infrastructure_runtime
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Add Helm Repo
          command: helm repo add cammis https://${GITHUB_ACCESS_TOKEN}@raw.githubusercontent.com/ca-mmis/cammis-helm/master/
      - run:
          name: Pull down Helm Chart repo
          command: |
            git config --global user.name $GIT_COMMITTER_NAME
            git config --global user.email $GIT_COMMITTER_EMAIL
            git clone https://${GITHUB_ACCESS_TOKEN}@github.com/ca-mmis/cammis-helm.git
      - run:
          name: Package Helm Chart
          command: helm_pkg.py -c helm/${APP_NAME} -v $(eval $TAG)
      - run:
          name: Publish Helm Chart
          command: | 
            mv helm/${APP_NAME}/${APP_NAME}-$(eval $TAG).tgz cammis-helm/.
            helm repo index cammis-helm
            git -C cammis-helm add .
            git -C cammis-helm commit -m "Added ${APP_NAME}:$(eval $TAG)"
            git -C cammis-helm push

#------------------------
# --- WORKFLOWS ---
#------------------------

# This workflow will run the "test" job on any git-push.
# It will run the "build" job only on a tag or branch push.
# The filters control which tags/branches get built.
# For a tag push, the branch info is empty, and vice-versa.
# The "tags" filter in the "test" job is necessary for the "build" job to run.
workflows:
  version: 2
  build-and-test:
    jobs:
      - cc-install:
          filters:
            tags:
              only: /.*/
      - test-whitesource
      - test-codeclimate:
          requires:
            - cc-install
      - upload-coverage:
          requires:
            - test-codeclimate
      - build:
          filters:
            branches:
              only: /^r_.+$/
            tags:
              only: /^\d+\.\d+\.\d+(\-.*)?$/
      - publish_helm:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+(\-.*)?$/

          
